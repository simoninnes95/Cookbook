# new branch

    git checkout -b <new-branch-name>

# new branch based on some branch

    git checkout -b <new-branch-name> <old-branch>

# set upstream branch

    check history -> $ git branch -vv
    set upstream -> $ git push -u origin <new-branch-name>

    then commit -> git commit -m "commit message"

# delete branch locally

    git branch -d localBranchName

# delete branch remotely

    git push origin --delete remoteBranchName

# revert committed changes not pushed to remote branch

    IF you have NOT pushed your changes to remote

    git reset HEAD~1

    Check if the working copy is clean by git status.

    ELSE you have pushed your changes to remote

    git revert HEAD

# cloning with multiple accounts

    git clone git@<HOST-NAME-SSHCONFIG>:<REPO-DETAILS>

# git commit


    You want to make a commit! Awesome! Here's how you do it:

        git commit: This will make a commit of the files you have staged using git add, and will open a VIM editor (or whichever editor you have configured in your .gitconfig) to enter your commit message.
        git commit -a: This will make a commit and add all changed files, and will open an editor to enter your commit message. This is the same as doing git add . && git commit.
        git commit -m "commit message": Skip the editor and put your entire message in the command line!
        git commit -a -m "commit message": Combine them all! Fab.

# git push

    Once you make a commit, you will need to push your changes to the server to make it visible to the world. Once you push, your branch and commit(s) will be visible to others.

        git push branch-name or git push origin HEAD: Push your branch upstream. You can use either version; using origin HEAD is simply a more verbose way of pushing. It signifies you are pushing the tip (HEAD) your branch to the same name on the remote origin.
        git push origin -f branch-name or git push origin +branch-name: exclamation exclamation exclamation BE CAREFUL: This is a potentially scary command, and you should only use it if you really know what you are doing. It will overwrite the branch you specified on the remote repository with your local copy of the branch. exclamation exclamation exclamation

# git log

    Show the history of all branches and their commits. Useful for seeing the most recent commit and getting commit hashes.

        git log: Show all commits on this branch, along with the commit hash, author, date and message.
        git log --oneline: Show a simplified version of the above command, showing only the commit hash and commit message.
        git log --graph: Show a graph of the commit history for your branch. (AWESOME)
        git log --max-count <n>: Limit the number of commits shown.
        git log --oneline --graph --max-count 50: Combined them all! Woo!

# show git branches

    git status

    # local branches
    git branch 

    # remote branches
    git branch -r


